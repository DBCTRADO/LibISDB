/*
  LibISDB
  Copyright(c) 2017-2019 DBCTRADO

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

/**
 @file   CRC.cpp
 @brief  CRC 計算
 @author DBCTRADO
*/


#include "../LibISDBPrivate.hpp"
#include "CRC.hpp"
#include "Utilities.hpp"


namespace LibISDB
{


namespace
{


#if defined(LIBISDB_CRC_SLICING_BY_4) || defined(LIBISDB_CRC_SLICING_BY_8)

/**< Slicing-by-4/8 用テーブル */
class CRC32SlicingTable
{
#ifdef LIBISDB_CRC_SLICING_BY_4
	static constexpr size_t SLICING_COUNT = 4;
#else
	static constexpr size_t SLICING_COUNT = 8;
#endif

	uint32_t m_Table[SLICING_COUNT][256];

public:
	CRC32SlicingTable(const uint32_t Table[256]) noexcept
	{
		for (size_t i = 0; i < 256; i++) {
			uint32_t c = Table[i];
			m_Table[0][i] = c;
			for (size_t j = 1; j < SLICING_COUNT; j++) {
				c = (c << 8) ^ Table[c >> 24];
				m_Table[j][i] = c;
			}
		}
	}

	typedef uint32_t ArrayType[256];
	const ArrayType & operator [] (size_t i) const noexcept { return m_Table[i]; }
};

#endif


}




CRC16::ValueType CRC16::Calc(const uint8_t *pData, size_t DataSize, ValueType CRC) noexcept
{
	static const uint16_t Table[256] = {
		0x0000_u16, 0x8005_u16, 0x800F_u16, 0x000A_u16, 0x801B_u16, 0x001E_u16, 0x0014_u16, 0x8011_u16,
		0x8033_u16, 0x0036_u16, 0x003C_u16, 0x8039_u16, 0x0028_u16, 0x802D_u16, 0x8027_u16, 0x0022_u16,
		0x8063_u16, 0x0066_u16, 0x006C_u16, 0x8069_u16, 0x0078_u16, 0x807D_u16, 0x8077_u16, 0x0072_u16,
		0x0050_u16, 0x8055_u16, 0x805F_u16, 0x005A_u16, 0x804B_u16, 0x004E_u16, 0x0044_u16, 0x8041_u16,
		0x80C3_u16, 0x00C6_u16, 0x00CC_u16, 0x80C9_u16, 0x00D8_u16, 0x80DD_u16, 0x80D7_u16, 0x00D2_u16,
		0x00F0_u16, 0x80F5_u16, 0x80FF_u16, 0x00FA_u16, 0x80EB_u16, 0x00EE_u16, 0x00E4_u16, 0x80E1_u16,
		0x00A0_u16, 0x80A5_u16, 0x80AF_u16, 0x00AA_u16, 0x80BB_u16, 0x00BE_u16, 0x00B4_u16, 0x80B1_u16,
		0x8093_u16, 0x0096_u16, 0x009C_u16, 0x8099_u16, 0x0088_u16, 0x808D_u16, 0x8087_u16, 0x0082_u16,
		0x8183_u16, 0x0186_u16, 0x018C_u16, 0x8189_u16, 0x0198_u16, 0x819D_u16, 0x8197_u16, 0x0192_u16,
		0x01B0_u16, 0x81B5_u16, 0x81BF_u16, 0x01BA_u16, 0x81AB_u16, 0x01AE_u16, 0x01A4_u16, 0x81A1_u16,
		0x01E0_u16, 0x81E5_u16, 0x81EF_u16, 0x01EA_u16, 0x81FB_u16, 0x01FE_u16, 0x01F4_u16, 0x81F1_u16,
		0x81D3_u16, 0x01D6_u16, 0x01DC_u16, 0x81D9_u16, 0x01C8_u16, 0x81CD_u16, 0x81C7_u16, 0x01C2_u16,
		0x0140_u16, 0x8145_u16, 0x814F_u16, 0x014A_u16, 0x815B_u16, 0x015E_u16, 0x0154_u16, 0x8151_u16,
		0x8173_u16, 0x0176_u16, 0x017C_u16, 0x8179_u16, 0x0168_u16, 0x816D_u16, 0x8167_u16, 0x0162_u16,
		0x8123_u16, 0x0126_u16, 0x012C_u16, 0x8129_u16, 0x0138_u16, 0x813D_u16, 0x8137_u16, 0x0132_u16,
		0x0110_u16, 0x8115_u16, 0x811F_u16, 0x011A_u16, 0x810B_u16, 0x010E_u16, 0x0104_u16, 0x8101_u16,
		0x8303_u16, 0x0306_u16, 0x030C_u16, 0x8309_u16, 0x0318_u16, 0x831D_u16, 0x8317_u16, 0x0312_u16,
		0x0330_u16, 0x8335_u16, 0x833F_u16, 0x033A_u16, 0x832B_u16, 0x032E_u16, 0x0324_u16, 0x8321_u16,
		0x0360_u16, 0x8365_u16, 0x836F_u16, 0x036A_u16, 0x837B_u16, 0x037E_u16, 0x0374_u16, 0x8371_u16,
		0x8353_u16, 0x0356_u16, 0x035C_u16, 0x8359_u16, 0x0348_u16, 0x834D_u16, 0x8347_u16, 0x0342_u16,
		0x03C0_u16, 0x83C5_u16, 0x83CF_u16, 0x03CA_u16, 0x83DB_u16, 0x03DE_u16, 0x03D4_u16, 0x83D1_u16,
		0x83F3_u16, 0x03F6_u16, 0x03FC_u16, 0x83F9_u16, 0x03E8_u16, 0x83ED_u16, 0x83E7_u16, 0x03E2_u16,
		0x83A3_u16, 0x03A6_u16, 0x03AC_u16, 0x83A9_u16, 0x03B8_u16, 0x83BD_u16, 0x83B7_u16, 0x03B2_u16,
		0x0390_u16, 0x8395_u16, 0x839F_u16, 0x039A_u16, 0x838B_u16, 0x038E_u16, 0x0384_u16, 0x8381_u16,
		0x0280_u16, 0x8285_u16, 0x828F_u16, 0x028A_u16, 0x829B_u16, 0x029E_u16, 0x0294_u16, 0x8291_u16,
		0x82B3_u16, 0x02B6_u16, 0x02BC_u16, 0x82B9_u16, 0x02A8_u16, 0x82AD_u16, 0x82A7_u16, 0x02A2_u16,
		0x82E3_u16, 0x02E6_u16, 0x02EC_u16, 0x82E9_u16, 0x02F8_u16, 0x82FD_u16, 0x82F7_u16, 0x02F2_u16,
		0x02D0_u16, 0x82D5_u16, 0x82DF_u16, 0x02DA_u16, 0x82CB_u16, 0x02CE_u16, 0x02C4_u16, 0x82C1_u16,
		0x8243_u16, 0x0246_u16, 0x024C_u16, 0x8249_u16, 0x0258_u16, 0x825D_u16, 0x8257_u16, 0x0252_u16,
		0x0270_u16, 0x8275_u16, 0x827F_u16, 0x027A_u16, 0x826B_u16, 0x026E_u16, 0x0264_u16, 0x8261_u16,
		0x0220_u16, 0x8225_u16, 0x822F_u16, 0x022A_u16, 0x823B_u16, 0x023E_u16, 0x0234_u16, 0x8231_u16,
		0x8213_u16, 0x0216_u16, 0x021C_u16, 0x8219_u16, 0x0208_u16, 0x820D_u16, 0x8207_u16, 0x0202_u16
	};

	const uint8_t *pEnd = pData + DataSize;

	for (const uint8_t *p = pData; p < pEnd; p++) {
		CRC = (CRC << 8) ^ Table[(CRC >> 8) ^ *p];
	}

	return CRC;
}




CRC16CCITT::ValueType CRC16CCITT::Calc(const uint8_t *pData, size_t DataSize, ValueType CRC) noexcept
{
	static const uint16_t Table[256] = {
		0x0000_u16, 0x1021_u16, 0x2042_u16, 0x3063_u16, 0x4084_u16, 0x50A5_u16, 0x60C6_u16, 0x70E7_u16,
		0x8108_u16, 0x9129_u16, 0xA14A_u16, 0xB16B_u16, 0xC18C_u16, 0xD1AD_u16, 0xE1CE_u16, 0xF1EF_u16,
		0x1231_u16, 0x0210_u16, 0x3273_u16, 0x2252_u16, 0x52B5_u16, 0x4294_u16, 0x72F7_u16, 0x62D6_u16,
		0x9339_u16, 0x8318_u16, 0xB37B_u16, 0xA35A_u16, 0xD3BD_u16, 0xC39C_u16, 0xF3FF_u16, 0xE3DE_u16,
		0x2462_u16, 0x3443_u16, 0x0420_u16, 0x1401_u16, 0x64E6_u16, 0x74C7_u16, 0x44A4_u16, 0x5485_u16,
		0xA56A_u16, 0xB54B_u16, 0x8528_u16, 0x9509_u16, 0xE5EE_u16, 0xF5CF_u16, 0xC5AC_u16, 0xD58D_u16,
		0x3653_u16, 0x2672_u16, 0x1611_u16, 0x0630_u16, 0x76D7_u16, 0x66F6_u16, 0x5695_u16, 0x46B4_u16,
		0xB75B_u16, 0xA77A_u16, 0x9719_u16, 0x8738_u16, 0xF7DF_u16, 0xE7FE_u16, 0xD79D_u16, 0xC7BC_u16,
		0x48C4_u16, 0x58E5_u16, 0x6886_u16, 0x78A7_u16, 0x0840_u16, 0x1861_u16, 0x2802_u16, 0x3823_u16,
		0xC9CC_u16, 0xD9ED_u16, 0xE98E_u16, 0xF9AF_u16, 0x8948_u16, 0x9969_u16, 0xA90A_u16, 0xB92B_u16,
		0x5AF5_u16, 0x4AD4_u16, 0x7AB7_u16, 0x6A96_u16, 0x1A71_u16, 0x0A50_u16, 0x3A33_u16, 0x2A12_u16,
		0xDBFD_u16, 0xCBDC_u16, 0xFBBF_u16, 0xEB9E_u16, 0x9B79_u16, 0x8B58_u16, 0xBB3B_u16, 0xAB1A_u16,
		0x6CA6_u16, 0x7C87_u16, 0x4CE4_u16, 0x5CC5_u16, 0x2C22_u16, 0x3C03_u16, 0x0C60_u16, 0x1C41_u16,
		0xEDAE_u16, 0xFD8F_u16, 0xCDEC_u16, 0xDDCD_u16, 0xAD2A_u16, 0xBD0B_u16, 0x8D68_u16, 0x9D49_u16,
		0x7E97_u16, 0x6EB6_u16, 0x5ED5_u16, 0x4EF4_u16, 0x3E13_u16, 0x2E32_u16, 0x1E51_u16, 0x0E70_u16,
		0xFF9F_u16, 0xEFBE_u16, 0xDFDD_u16, 0xCFFC_u16, 0xBF1B_u16, 0xAF3A_u16, 0x9F59_u16, 0x8F78_u16,
		0x9188_u16, 0x81A9_u16, 0xB1CA_u16, 0xA1EB_u16, 0xD10C_u16, 0xC12D_u16, 0xF14E_u16, 0xE16F_u16,
		0x1080_u16, 0x00A1_u16, 0x30C2_u16, 0x20E3_u16, 0x5004_u16, 0x4025_u16, 0x7046_u16, 0x6067_u16,
		0x83B9_u16, 0x9398_u16, 0xA3FB_u16, 0xB3DA_u16, 0xC33D_u16, 0xD31C_u16, 0xE37F_u16, 0xF35E_u16,
		0x02B1_u16, 0x1290_u16, 0x22F3_u16, 0x32D2_u16, 0x4235_u16, 0x5214_u16, 0x6277_u16, 0x7256_u16,
		0xB5EA_u16, 0xA5CB_u16, 0x95A8_u16, 0x8589_u16, 0xF56E_u16, 0xE54F_u16, 0xD52C_u16, 0xC50D_u16,
		0x34E2_u16, 0x24C3_u16, 0x14A0_u16, 0x0481_u16, 0x7466_u16, 0x6447_u16, 0x5424_u16, 0x4405_u16,
		0xA7DB_u16, 0xB7FA_u16, 0x8799_u16, 0x97B8_u16, 0xE75F_u16, 0xF77E_u16, 0xC71D_u16, 0xD73C_u16,
		0x26D3_u16, 0x36F2_u16, 0x0691_u16, 0x16B0_u16, 0x6657_u16, 0x7676_u16, 0x4615_u16, 0x5634_u16,
		0xD94C_u16, 0xC96D_u16, 0xF90E_u16, 0xE92F_u16, 0x99C8_u16, 0x89E9_u16, 0xB98A_u16, 0xA9AB_u16,
		0x5844_u16, 0x4865_u16, 0x7806_u16, 0x6827_u16, 0x18C0_u16, 0x08E1_u16, 0x3882_u16, 0x28A3_u16,
		0xCB7D_u16, 0xDB5C_u16, 0xEB3F_u16, 0xFB1E_u16, 0x8BF9_u16, 0x9BD8_u16, 0xABBB_u16, 0xBB9A_u16,
		0x4A75_u16, 0x5A54_u16, 0x6A37_u16, 0x7A16_u16, 0x0AF1_u16, 0x1AD0_u16, 0x2AB3_u16, 0x3A92_u16,
		0xFD2E_u16, 0xED0F_u16, 0xDD6C_u16, 0xCD4D_u16, 0xBDAA_u16, 0xAD8B_u16, 0x9DE8_u16, 0x8DC9_u16,
		0x7C26_u16, 0x6C07_u16, 0x5C64_u16, 0x4C45_u16, 0x3CA2_u16, 0x2C83_u16, 0x1CE0_u16, 0x0CC1_u16,
		0xEF1F_u16, 0xFF3E_u16, 0xCF5D_u16, 0xDF7C_u16, 0xAF9B_u16, 0xBFBA_u16, 0x8FD9_u16, 0x9FF8_u16,
		0x6E17_u16, 0x7E36_u16, 0x4E55_u16, 0x5E74_u16, 0x2E93_u16, 0x3EB2_u16, 0x0ED1_u16, 0x1EF0_u16
	};

	const uint8_t *pEnd = pData + DataSize;

	for (const uint8_t *p = pData; p < pEnd; p++) {
		CRC = (CRC << 8) ^ Table[(CRC >> 8) ^ *p];
	}

	return CRC;
}




CRC32::ValueType CRC32::Calc(const uint8_t *pData, size_t DataSize, ValueType CRC) noexcept
{
	static const uint32_t Table[256] = {
		0x00000000_u32, 0x77073096_u32, 0xEE0E612C_u32, 0x990951BA_u32, 0x076DC419_u32, 0x706AF48F_u32, 0xE963A535_u32, 0x9E6495A3_u32,
		0x0EDB8832_u32, 0x79DCB8A4_u32, 0xE0D5E91E_u32, 0x97D2D988_u32, 0x09B64C2B_u32, 0x7EB17CBD_u32, 0xE7B82D07_u32, 0x90BF1D91_u32,
		0x1DB71064_u32, 0x6AB020F2_u32, 0xF3B97148_u32, 0x84BE41DE_u32, 0x1ADAD47D_u32, 0x6DDDE4EB_u32, 0xF4D4B551_u32, 0x83D385C7_u32,
		0x136C9856_u32, 0x646BA8C0_u32, 0xFD62F97A_u32, 0x8A65C9EC_u32, 0x14015C4F_u32, 0x63066CD9_u32, 0xFA0F3D63_u32, 0x8D080DF5_u32,
		0x3B6E20C8_u32, 0x4C69105E_u32, 0xD56041E4_u32, 0xA2677172_u32, 0x3C03E4D1_u32, 0x4B04D447_u32, 0xD20D85FD_u32, 0xA50AB56B_u32,
		0x35B5A8FA_u32, 0x42B2986C_u32, 0xDBBBC9D6_u32, 0xACBCF940_u32, 0x32D86CE3_u32, 0x45DF5C75_u32, 0xDCD60DCF_u32, 0xABD13D59_u32,
		0x26D930AC_u32, 0x51DE003A_u32, 0xC8D75180_u32, 0xBFD06116_u32, 0x21B4F4B5_u32, 0x56B3C423_u32, 0xCFBA9599_u32, 0xB8BDA50F_u32,
		0x2802B89E_u32, 0x5F058808_u32, 0xC60CD9B2_u32, 0xB10BE924_u32, 0x2F6F7C87_u32, 0x58684C11_u32, 0xC1611DAB_u32, 0xB6662D3D_u32,
		0x76DC4190_u32, 0x01DB7106_u32, 0x98D220BC_u32, 0xEFD5102A_u32, 0x71B18589_u32, 0x06B6B51F_u32, 0x9FBFE4A5_u32, 0xE8B8D433_u32,
		0x7807C9A2_u32, 0x0F00F934_u32, 0x9609A88E_u32, 0xE10E9818_u32, 0x7F6A0DBB_u32, 0x086D3D2D_u32, 0x91646C97_u32, 0xE6635C01_u32,
		0x6B6B51F4_u32, 0x1C6C6162_u32, 0x856530D8_u32, 0xF262004E_u32, 0x6C0695ED_u32, 0x1B01A57B_u32, 0x8208F4C1_u32, 0xF50FC457_u32,
		0x65B0D9C6_u32, 0x12B7E950_u32, 0x8BBEB8EA_u32, 0xFCB9887C_u32, 0x62DD1DDF_u32, 0x15DA2D49_u32, 0x8CD37CF3_u32, 0xFBD44C65_u32,
		0x4DB26158_u32, 0x3AB551CE_u32, 0xA3BC0074_u32, 0xD4BB30E2_u32, 0x4ADFA541_u32, 0x3DD895D7_u32, 0xA4D1C46D_u32, 0xD3D6F4FB_u32,
		0x4369E96A_u32, 0x346ED9FC_u32, 0xAD678846_u32, 0xDA60B8D0_u32, 0x44042D73_u32, 0x33031DE5_u32, 0xAA0A4C5F_u32, 0xDD0D7CC9_u32,
		0x5005713C_u32, 0x270241AA_u32, 0xBE0B1010_u32, 0xC90C2086_u32, 0x5768B525_u32, 0x206F85B3_u32, 0xB966D409_u32, 0xCE61E49F_u32,
		0x5EDEF90E_u32, 0x29D9C998_u32, 0xB0D09822_u32, 0xC7D7A8B4_u32, 0x59B33D17_u32, 0x2EB40D81_u32, 0xB7BD5C3B_u32, 0xC0BA6CAD_u32,
		0xEDB88320_u32, 0x9ABFB3B6_u32, 0x03B6E20C_u32, 0x74B1D29A_u32, 0xEAD54739_u32, 0x9DD277AF_u32, 0x04DB2615_u32, 0x73DC1683_u32,
		0xE3630B12_u32, 0x94643B84_u32, 0x0D6D6A3E_u32, 0x7A6A5AA8_u32, 0xE40ECF0B_u32, 0x9309FF9D_u32, 0x0A00AE27_u32, 0x7D079EB1_u32,
		0xF00F9344_u32, 0x8708A3D2_u32, 0x1E01F268_u32, 0x6906C2FE_u32, 0xF762575D_u32, 0x806567CB_u32, 0x196C3671_u32, 0x6E6B06E7_u32,
		0xFED41B76_u32, 0x89D32BE0_u32, 0x10DA7A5A_u32, 0x67DD4ACC_u32, 0xF9B9DF6F_u32, 0x8EBEEFF9_u32, 0x17B7BE43_u32, 0x60B08ED5_u32,
		0xD6D6A3E8_u32, 0xA1D1937E_u32, 0x38D8C2C4_u32, 0x4FDFF252_u32, 0xD1BB67F1_u32, 0xA6BC5767_u32, 0x3FB506DD_u32, 0x48B2364B_u32,
		0xD80D2BDA_u32, 0xAF0A1B4C_u32, 0x36034AF6_u32, 0x41047A60_u32, 0xDF60EFC3_u32, 0xA867DF55_u32, 0x316E8EEF_u32, 0x4669BE79_u32,
		0xCB61B38C_u32, 0xBC66831A_u32, 0x256FD2A0_u32, 0x5268E236_u32, 0xCC0C7795_u32, 0xBB0B4703_u32, 0x220216B9_u32, 0x5505262F_u32,
		0xC5BA3BBE_u32, 0xB2BD0B28_u32, 0x2BB45A92_u32, 0x5CB36A04_u32, 0xC2D7FFA7_u32, 0xB5D0CF31_u32, 0x2CD99E8B_u32, 0x5BDEAE1D_u32,
		0x9B64C2B0_u32, 0xEC63F226_u32, 0x756AA39C_u32, 0x026D930A_u32, 0x9C0906A9_u32, 0xEB0E363F_u32, 0x72076785_u32, 0x05005713_u32,
		0x95BF4A82_u32, 0xE2B87A14_u32, 0x7BB12BAE_u32, 0x0CB61B38_u32, 0x92D28E9B_u32, 0xE5D5BE0D_u32, 0x7CDCEFB7_u32, 0x0BDBDF21_u32,
		0x86D3D2D4_u32, 0xF1D4E242_u32, 0x68DDB3F8_u32, 0x1FDA836E_u32, 0x81BE16CD_u32, 0xF6B9265B_u32, 0x6FB077E1_u32, 0x18B74777_u32,
		0x88085AE6_u32, 0xFF0F6A70_u32, 0x66063BCA_u32, 0x11010B5C_u32, 0x8F659EFF_u32, 0xF862AE69_u32, 0x616BFFD3_u32, 0x166CCF45_u32,
		0xA00AE278_u32, 0xD70DD2EE_u32, 0x4E048354_u32, 0x3903B3C2_u32, 0xA7672661_u32, 0xD06016F7_u32, 0x4969474D_u32, 0x3E6E77DB_u32,
		0xAED16A4A_u32, 0xD9D65ADC_u32, 0x40DF0B66_u32, 0x37D83BF0_u32, 0xA9BCAE53_u32, 0xDEBB9EC5_u32, 0x47B2CF7F_u32, 0x30B5FFE9_u32,
		0xBDBDF21C_u32, 0xCABAC28A_u32, 0x53B39330_u32, 0x24B4A3A6_u32, 0xBAD03605_u32, 0xCDD70693_u32, 0x54DE5729_u32, 0x23D967BF_u32,
		0xB3667A2E_u32, 0xC4614AB8_u32, 0x5D681B02_u32, 0x2A6F2B94_u32, 0xB40BBE37_u32, 0xC30C8EA1_u32, 0x5A05DF1B_u32, 0x2D02EF8D_u32
	};

	const uint8_t *pEnd = pData + DataSize;

	CRC = ~CRC;

	for (const uint8_t *p = pData; p < pEnd; p++) {
		CRC = (CRC >> 8) ^ Table[(CRC ^ *p) & 0xFF];
	}

	return ~CRC;
}




static const uint32_t g_CRC32MPEG2Table[256] = {
	0x00000000_u32, 0x04C11DB7_u32, 0x09823B6E_u32, 0x0D4326D9_u32, 0x130476DC_u32, 0x17C56B6B_u32, 0x1A864DB2_u32, 0x1E475005_u32,
	0x2608EDB8_u32, 0x22C9F00F_u32, 0x2F8AD6D6_u32, 0x2B4BCB61_u32, 0x350C9B64_u32, 0x31CD86D3_u32, 0x3C8EA00A_u32, 0x384FBDBD_u32,
	0x4C11DB70_u32, 0x48D0C6C7_u32, 0x4593E01E_u32, 0x4152FDA9_u32, 0x5F15ADAC_u32, 0x5BD4B01B_u32, 0x569796C2_u32, 0x52568B75_u32,
	0x6A1936C8_u32, 0x6ED82B7F_u32, 0x639B0DA6_u32, 0x675A1011_u32, 0x791D4014_u32, 0x7DDC5DA3_u32, 0x709F7B7A_u32, 0x745E66CD_u32,
	0x9823B6E0_u32, 0x9CE2AB57_u32, 0x91A18D8E_u32, 0x95609039_u32, 0x8B27C03C_u32, 0x8FE6DD8B_u32, 0x82A5FB52_u32, 0x8664E6E5_u32,
	0xBE2B5B58_u32, 0xBAEA46EF_u32, 0xB7A96036_u32, 0xB3687D81_u32, 0xAD2F2D84_u32, 0xA9EE3033_u32, 0xA4AD16EA_u32, 0xA06C0B5D_u32,
	0xD4326D90_u32, 0xD0F37027_u32, 0xDDB056FE_u32, 0xD9714B49_u32, 0xC7361B4C_u32, 0xC3F706FB_u32, 0xCEB42022_u32, 0xCA753D95_u32,
	0xF23A8028_u32, 0xF6FB9D9F_u32, 0xFBB8BB46_u32, 0xFF79A6F1_u32, 0xE13EF6F4_u32, 0xE5FFEB43_u32, 0xE8BCCD9A_u32, 0xEC7DD02D_u32,
	0x34867077_u32, 0x30476DC0_u32, 0x3D044B19_u32, 0x39C556AE_u32, 0x278206AB_u32, 0x23431B1C_u32, 0x2E003DC5_u32, 0x2AC12072_u32,
	0x128E9DCF_u32, 0x164F8078_u32, 0x1B0CA6A1_u32, 0x1FCDBB16_u32, 0x018AEB13_u32, 0x054BF6A4_u32, 0x0808D07D_u32, 0x0CC9CDCA_u32,
	0x7897AB07_u32, 0x7C56B6B0_u32, 0x71159069_u32, 0x75D48DDE_u32, 0x6B93DDDB_u32, 0x6F52C06C_u32, 0x6211E6B5_u32, 0x66D0FB02_u32,
	0x5E9F46BF_u32, 0x5A5E5B08_u32, 0x571D7DD1_u32, 0x53DC6066_u32, 0x4D9B3063_u32, 0x495A2DD4_u32, 0x44190B0D_u32, 0x40D816BA_u32,
	0xACA5C697_u32, 0xA864DB20_u32, 0xA527FDF9_u32, 0xA1E6E04E_u32, 0xBFA1B04B_u32, 0xBB60ADFC_u32, 0xB6238B25_u32, 0xB2E29692_u32,
	0x8AAD2B2F_u32, 0x8E6C3698_u32, 0x832F1041_u32, 0x87EE0DF6_u32, 0x99A95DF3_u32, 0x9D684044_u32, 0x902B669D_u32, 0x94EA7B2A_u32,
	0xE0B41DE7_u32, 0xE4750050_u32, 0xE9362689_u32, 0xEDF73B3E_u32, 0xF3B06B3B_u32, 0xF771768C_u32, 0xFA325055_u32, 0xFEF34DE2_u32,
	0xC6BCF05F_u32, 0xC27DEDE8_u32, 0xCF3ECB31_u32, 0xCBFFD686_u32, 0xD5B88683_u32, 0xD1799B34_u32, 0xDC3ABDED_u32, 0xD8FBA05A_u32,
	0x690CE0EE_u32, 0x6DCDFD59_u32, 0x608EDB80_u32, 0x644FC637_u32, 0x7A089632_u32, 0x7EC98B85_u32, 0x738AAD5C_u32, 0x774BB0EB_u32,
	0x4F040D56_u32, 0x4BC510E1_u32, 0x46863638_u32, 0x42472B8F_u32, 0x5C007B8A_u32, 0x58C1663D_u32, 0x558240E4_u32, 0x51435D53_u32,
	0x251D3B9E_u32, 0x21DC2629_u32, 0x2C9F00F0_u32, 0x285E1D47_u32, 0x36194D42_u32, 0x32D850F5_u32, 0x3F9B762C_u32, 0x3B5A6B9B_u32,
	0x0315D626_u32, 0x07D4CB91_u32, 0x0A97ED48_u32, 0x0E56F0FF_u32, 0x1011A0FA_u32, 0x14D0BD4D_u32, 0x19939B94_u32, 0x1D528623_u32,
	0xF12F560E_u32, 0xF5EE4BB9_u32, 0xF8AD6D60_u32, 0xFC6C70D7_u32, 0xE22B20D2_u32, 0xE6EA3D65_u32, 0xEBA91BBC_u32, 0xEF68060B_u32,
	0xD727BBB6_u32, 0xD3E6A601_u32, 0xDEA580D8_u32, 0xDA649D6F_u32, 0xC423CD6A_u32, 0xC0E2D0DD_u32, 0xCDA1F604_u32, 0xC960EBB3_u32,
	0xBD3E8D7E_u32, 0xB9FF90C9_u32, 0xB4BCB610_u32, 0xB07DABA7_u32, 0xAE3AFBA2_u32, 0xAAFBE615_u32, 0xA7B8C0CC_u32, 0xA379DD7B_u32,
	0x9B3660C6_u32, 0x9FF77D71_u32, 0x92B45BA8_u32, 0x9675461F_u32, 0x8832161A_u32, 0x8CF30BAD_u32, 0x81B02D74_u32, 0x857130C3_u32,
	0x5D8A9099_u32, 0x594B8D2E_u32, 0x5408ABF7_u32, 0x50C9B640_u32, 0x4E8EE645_u32, 0x4A4FFBF2_u32, 0x470CDD2B_u32, 0x43CDC09C_u32,
	0x7B827D21_u32, 0x7F436096_u32, 0x7200464F_u32, 0x76C15BF8_u32, 0x68860BFD_u32, 0x6C47164A_u32, 0x61043093_u32, 0x65C52D24_u32,
	0x119B4BE9_u32, 0x155A565E_u32, 0x18197087_u32, 0x1CD86D30_u32, 0x029F3D35_u32, 0x065E2082_u32, 0x0B1D065B_u32, 0x0FDC1BEC_u32,
	0x3793A651_u32, 0x3352BBE6_u32, 0x3E119D3F_u32, 0x3AD08088_u32, 0x2497D08D_u32, 0x2056CD3A_u32, 0x2D15EBE3_u32, 0x29D4F654_u32,
	0xC5A92679_u32, 0xC1683BCE_u32, 0xCC2B1D17_u32, 0xC8EA00A0_u32, 0xD6AD50A5_u32, 0xD26C4D12_u32, 0xDF2F6BCB_u32, 0xDBEE767C_u32,
	0xE3A1CBC1_u32, 0xE760D676_u32, 0xEA23F0AF_u32, 0xEEE2ED18_u32, 0xF0A5BD1D_u32, 0xF464A0AA_u32, 0xF9278673_u32, 0xFDE69BC4_u32,
	0x89B8FD09_u32, 0x8D79E0BE_u32, 0x803AC667_u32, 0x84FBDBD0_u32, 0x9ABC8BD5_u32, 0x9E7D9662_u32, 0x933EB0BB_u32, 0x97FFAD0C_u32,
	0xAFB010B1_u32, 0xAB710D06_u32, 0xA6322BDF_u32, 0xA2F33668_u32, 0xBCB4666D_u32, 0xB8757BDA_u32, 0xB5365D03_u32, 0xB1F740B4_u32
};


#if !defined(LIBISDB_CRC_SLICING_BY_4) && !defined(LIBISDB_CRC_SLICING_BY_8)

// Dilip V. Sarwate のアルゴリズム

CRC32MPEG2::ValueType CRC32MPEG2::Calc(const uint8_t *pData, size_t DataSize, ValueType CRC) noexcept
{
	const uint8_t *pEnd = pData + DataSize;

	while (const uint8_t *p = pData; p < pEnd; p++) {
		CRC = (CRC << 8) ^ g_CRC32MPEG2Table[(CRC >> 24) ^ *p];
	}

	return CRC;
}

#else

CRC32MPEG2::ValueType CRC32MPEG2::Calc(const uint8_t *pData, size_t DataSize, ValueType CRC) noexcept
{
	static CRC32SlicingTable Table(g_CRC32MPEG2Table);

	const uint8_t *p = pData;
	const uint8_t *pEnd = p;

	if (DataSize >= 8) {
		const size_t Align = (sizeof(uint32_t) - reinterpret_cast<uintptr_t>(p)) & 3;
		DataSize -= Align;
		pEnd += Align;
		while (p < pEnd) {
			CRC = (CRC << 8) ^ Table[0][(CRC >> 24) ^ (*p++)];
		}

#ifdef LIBISDB_CRC_SLICING_BY_4
		// Slicing-by-4
		pEnd += DataSize & ~3_z;
		while (p < pEnd) {
			CRC ^= Load32(p);
			p += sizeof(uint32_t);
			CRC =
				Table[0][(CRC      ) & 0xFF] ^
				Table[1][(CRC >>  8) & 0xFF] ^
				Table[2][(CRC >> 16) & 0xFF] ^
				Table[3][(CRC >> 24)];
		}

		DataSize &= 3;
#else
		// Slicing-by-8
		pEnd += DataSize & ~7_z;
		while (p < pEnd) {
			CRC ^= Load32(p);
			p += sizeof(uint32_t);
			const uint32_t Next = *reinterpret_cast<const uint32_t *>(p);
			p += sizeof(uint32_t);
			CRC =
				Table[7][(CRC  >> 24)] ^
				Table[6][(CRC  >> 16) & 0xFF] ^
				Table[5][(CRC  >>  8) & 0xFF] ^
				Table[4][(CRC       ) & 0xFF] ^
#ifdef LIBISDB_MSB_FIRST
				Table[3][(Next >> 24) & 0xFF] ^
				Table[2][(Next >> 16) & 0xFF] ^
				Table[1][(Next >>  8) & 0xFF] ^
				Table[0][(Next      )];
#else
				Table[3][(Next      ) & 0xFF] ^
				Table[2][(Next >>  8) & 0xFF] ^
				Table[1][(Next >> 16) & 0xFF] ^
				Table[0][(Next >> 24)];
#endif
		}

		DataSize &= 7;
#endif
	}

	pEnd += DataSize;
	while (p < pEnd) {
		CRC = (CRC << 8) ^ Table[0][(CRC >> 24) ^ (*p++)];
	}

	return CRC;
}

#endif


}	// namespace LibISDB
